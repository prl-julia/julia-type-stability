* Many small TODOs from past meetings
** Empirical Study
*** How to measure timing impact of unstable functions?
**** Attach counters recording number of calls?
**** Use profiler?
*** Do we want to make sure no standard functions get into the stats? Probably
*** Probable bugs
**** DONE 0s in the current tables: constructors are not filtered early enough?
**** DONE Sometimes stable=NaN (division by zero) -- most likely, consequence of previous
**** TODO Pluto fails because of CSV can't install itself
(probably fixed by starting from scratch env?)
***** Ben says it's a bad idea to `Pkg.add` anything during test suite
****** His idea: to setup environment with CSV for the testsuite
****** Another idea (of me): dump results to a text file and read it back after test suite is done
*** Nice to have
**** declared types of the methods
**** how unstable is every call: ratio of unstable *slots*
*** Data Analysis We May Be Interested In
**** correlations b/w stability and:
***** size of methods
***** amount of control-flows (jumps)
***** amount of `return`s
***** stability of code near return site (probably hard to measure)
*** TODO Change scatter plot to "heatmap" (it seems, 2D-histogram is the right term)
** Formal model
*** Two IRs
**** How is "surface" language different from IR?
***** One difference: "just calls" on surface become dispatches or direct-calls in IR?
***** What else?
**** Ben thinks that the key is translation between those two â€” why?
**** Do we need two flavours of IR: strongly typed and gradually typed?
- So that we can state the "safe fragment" property.
*** Single IR
** Misc
- What does stability mean:
  + in docs
  + in compiler sources
- Are abstract types the same in terms of stability (always unstable) as (nontrivial) unions?
