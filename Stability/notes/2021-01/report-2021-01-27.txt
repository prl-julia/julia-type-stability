1. Revising failures in the pipeline (including after some talk with Tim Holy over on Discourse).
   Result: I discard constructors now. This makes numbers way cleaner (i.e. less failures).
   A small number of type inference failures remains, mostly form @generated functions.
   Maybe we should revise @generated at some point.

2. Figuring out how to restructure data about stability with its relation to method sizes.
   Previously I keyed the data on function names, but a function can have several methods with completely unrelated
   implementations (including in terms of sizes). For now I decided to change for keying on individual methods.

   Note that there are more layers in this hierarchy: every method can have several (compiled) method instances;
   every method instance can have several "specializations".

3. I had some more thoughts about the formalism. In a nutshell, key components are:
   - a sound language with no static typing, dynamic dispatche on run-time types (no overloading),
     so every function call can be either dynamically resolved or produces an error;
   - a type system that calculates static approximation of types of arguments;
   - using the information computed by type inference we can replace dynamic dispatches with static calls.
   - proof that this transformation produces a program that simulates the original program.

   What remains to be worked out is how exactly "dynamic dispatch" and "static calls" look in the language.

# Notes form 1t1 with Jan

look up how they (Julia) define type stability:
- in the docs
- in the impl

do abstract hurt stability as much as unions?

# Notes from Juliette meeting

Ben: which kind of types cause unstability?

frequency of stable? run-time times? real apps?

Julia: how many instable slots are there?

Jan: get an idea about the number of methods, not instances

Jan: surface lang:
- every var is any
- every call is dispatch
- no ANF [Ben: having ANF there is easier; Jan: agreed]
